// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DlframeworkModelManifest dlframework model manifest
// swagger:model dlframeworkModelManifest
type DlframeworkModelManifest struct {

	// after postprocess
	AfterPostprocess string `json:"after_postprocess,omitempty"`

	// after preprocess
	AfterPreprocess string `json:"after_preprocess,omitempty"`

	// attributes
	Attributes map[string]string `json:"attributes,omitempty"`

	// before postprocess
	BeforePostprocess string `json:"before_postprocess,omitempty"`

	// before preprocess
	BeforePreprocess string `json:"before_preprocess,omitempty"`

	// container
	Container map[string]DlframeworkContainerHardware `json:"container,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// framework
	Framework *DlframeworkFrameworkManifest `json:"framework,omitempty"`

	// hidden
	Hidden bool `json:"hidden,omitempty"`

	// inputs
	Inputs []*DlframeworkModelManifestType `json:"inputs"`

	// license
	License string `json:"license,omitempty"`

	// model
	Model *ModelManifestModel `json:"model,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// output
	Output *DlframeworkModelManifestType `json:"output,omitempty"`

	// postprocess
	Postprocess string `json:"postprocess,omitempty"`

	// preprocess
	Preprocess string `json:"preprocess,omitempty"`

	// reference
	Reference []string `json:"reference"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this dlframework model manifest
func (m *DlframeworkModelManifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DlframeworkModelManifest) validateContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.Container) { // not required
		return nil
	}

	for k := range m.Container {

		if err := validate.Required("container"+"."+k, "body", m.Container[k]); err != nil {
			return err
		}
		if val, ok := m.Container[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DlframeworkModelManifest) validateFramework(formats strfmt.Registry) error {

	if swag.IsZero(m.Framework) { // not required
		return nil
	}

	if m.Framework != nil {
		if err := m.Framework.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("framework")
			}
			return err
		}
	}

	return nil
}

func (m *DlframeworkModelManifest) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	for i := 0; i < len(m.Inputs); i++ {
		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {
			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DlframeworkModelManifest) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *DlframeworkModelManifest) validateOutput(formats strfmt.Registry) error {

	if swag.IsZero(m.Output) { // not required
		return nil
	}

	if m.Output != nil {
		if err := m.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DlframeworkModelManifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DlframeworkModelManifest) UnmarshalBinary(b []byte) error {
	var res DlframeworkModelManifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
