// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DlframeworkAgent dlframework agent
// swagger:model dlframeworkAgent
type DlframeworkAgent struct {

	// architecture
	Architecture string `json:"architecture,omitempty"`

	// cpuinfo
	Cpuinfo string `json:"cpuinfo,omitempty"`

	// frameworks
	Frameworks []*DlframeworkFrameworkManifest `json:"frameworks"`

	// gpuinfo
	Gpuinfo string `json:"gpuinfo,omitempty"`

	// hasgpu
	Hasgpu bool `json:"hasgpu,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// port
	Port string `json:"port,omitempty"`
}

// Validate validates this dlframework agent
func (m *DlframeworkAgent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrameworks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DlframeworkAgent) validateFrameworks(formats strfmt.Registry) error {

	if swag.IsZero(m.Frameworks) { // not required
		return nil
	}

	for i := 0; i < len(m.Frameworks); i++ {
		if swag.IsZero(m.Frameworks[i]) { // not required
			continue
		}

		if m.Frameworks[i] != nil {
			if err := m.Frameworks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frameworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DlframeworkAgent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DlframeworkAgent) UnmarshalBinary(b []byte) error {
	var res DlframeworkAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
